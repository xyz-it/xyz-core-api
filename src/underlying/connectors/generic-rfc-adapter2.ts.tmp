import {ModelAdapter2} from "./model-adapter2";
import { rfcQuery } from "./rfc-query-table";
import {map} from "rxjs/operators";
import {
  BasicMapper,
  FieldMapper
} from "../../tools/conversion/mappers/basic-bapi-mapper";
import { injectable } from "inversify";

@injectable()
  export class GenericRfcAdapter2 implements ModelAdapter2 {

    /*
    private modelConstructor: new() => T;
    private mapping: FieldMapper[];
    private table: string;*/

    public constructor( ) {
      /*
      this.modelConstructor = modelConstructor;
      this.mapping = mapping;
      this.table = table;
      */
    }

    create<T>(mapping: FieldMapper[], table:string, obj: T|T[]): Promise<T|T[]> {
      return null; // Not implemented for RFC SOAP
    };

    delete<T>(obj: T|T[]): void {
      return null; // Not implemented
    };

    query<T>(modelConstructor: new() => T, mapping: FieldMapper[], table:string, ...args: any[]): Promise<T[]> {
      return rfcQuery({queryTable: table })
        .pipe(map(this.mapToGeneric<T>(modelConstructor, mapping)))
        .toPromise();
    };

    update<T>(obj: T|T[]): Promise<T|T[]> {
      return null; // Not implemented
    };

    // readonly read = (...args: any[]) => {
    // tslint:disable-next-line:no-shadowed-variable
    read<T>(modelConstructor: new() => T, mapping: FieldMapper[], table:string, ...args: any[]): Promise<T> {
      return rfcQuery({queryTable: table, whereClause: [`RCOMP = $(companyId)`] })
        .pipe(map(this.mapToGeneric<T>(modelConstructor, mapping)), map(res => res[0]))
        .toPromise();
    }

    private mapToGeneric<T>(modelConstructor: new() => T, mapping: FieldMapper[]): (input:any) => T[] {
      return function<T>(input:any):T[] {
        const objectTable:T[] = new Array<T>();
  
        input.data.forEach(record => {
          objectTable.push(BasicMapper.deserialize<T>(this.modelConstructor, this.mapping, record));
        })
  
        return objectTable;
      }
    }

    /*
    private mapToGeneric<T>(input:any):T[] {
      const objectTable:T[] = new Array<T>();

      input.data.forEach(record => {
        objectTable.push(BasicMapper.deserialize<T>(this.modelConstructor, this.mapping, record));
      })

      return objectTable;
    }
    */
  }

